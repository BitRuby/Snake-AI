type SELECTION_TYPES = 'tournament' | 'roulette';
type CROSSOVER_TYPES = 'uniform_binary' | 'one_point';
type MUTATION_TYPES = 'uniform_mutation';
type ACTIVATION_FUNCTION_TYPES = 'sigmoid' | "relu";

interface IAlgorithm {
  GENERATIONS: number,
  POPULATION_SIZE: number,
  SELECTION_TYPE: SELECTION_TYPES,
  TOURNAMENT_SIZE: number,
  CROSSOVER_TYPE: CROSSOVER_TYPES,
  CROSSOVER_PROPABILITY: number,
  MUTATION_TYPE: MUTATION_TYPES,
  MUTATION_UNIFORM_PROPABILITY: number,
  MUTATION_UNIFORM_LOWER_BOUNDS: number,
  MUTATION_UNIFORM_UPPER_BOUNDS: number
}

interface INetwork {
  RANDOM_WEIGHTS_LOWER_BOUNDS: number,
  RANDOM_WEIGHTS_UPPER_BOUNDS: number,
  ACTIVATION_FUNCTION: ACTIVATION_FUNCTION_TYPES,
  NN_ARCHITECTURE: Array<number>
}

export const ALGORITHM: IAlgorithm = {
  GENERATIONS: 1000,
  POPULATION_SIZE: 500,
  SELECTION_TYPE: "tournament",
  TOURNAMENT_SIZE: 50,
  CROSSOVER_TYPE: "uniform_binary",
  CROSSOVER_PROPABILITY: 0.65,
  MUTATION_TYPE: "uniform_mutation",
  MUTATION_UNIFORM_PROPABILITY: 0.1,
  MUTATION_UNIFORM_LOWER_BOUNDS: 0,
  MUTATION_UNIFORM_UPPER_BOUNDS: 1
};

export const NETWORK: INetwork = {
  RANDOM_WEIGHTS_LOWER_BOUNDS: -5,
  RANDOM_WEIGHTS_UPPER_BOUNDS: 5,
  ACTIVATION_FUNCTION: "sigmoid",
  NN_ARCHITECTURE: [32, 20, 12, 4]
};
