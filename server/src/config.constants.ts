type SELECTION_TYPES = 'tournament';
type CROSSOVER_TYPES = 'uniform_binary';
type MUTATION_TYPES = 'uniform_mutation';
type ACTIVATION_FUNCTION_TYPES = 'sigmoid' | "relu";

interface IAlgorithm {
  POPULATION_SIZE: number,
  SELECTION_TYPE: SELECTION_TYPES,
  TOURNAMENT_SIZE: number,
  CROSSOVER_TYPE: CROSSOVER_TYPES,
  CROSSOVER_PROPABILITY: number,
  MUTATION_TYPE: MUTATION_TYPES,
  MUTATION_UNIFORM_PROPABILITY: number,
  MUTATION_UNIFORM_LOWER_BOUNDS: number,
  MUTATION_UNIFORM_UPPER_BOUNDS: number
}

interface INetwork {
  RANDOM_WEIGHTS_LOWER_BOUNDS: number,
  RANDOM_WEIGHTS_UPPER_BOUNDS: number,
  ACTIVATION_FUNCTION: ACTIVATION_FUNCTION_TYPES
}

export const ALGORITHM: IAlgorithm = {
  POPULATION_SIZE: 4,
  SELECTION_TYPE: "tournament",
  TOURNAMENT_SIZE: 4,
  CROSSOVER_TYPE: "uniform_binary",
  CROSSOVER_PROPABILITY: 1,
  MUTATION_TYPE: "uniform_mutation",
  MUTATION_UNIFORM_PROPABILITY: 1,
  MUTATION_UNIFORM_LOWER_BOUNDS: 0,
  MUTATION_UNIFORM_UPPER_BOUNDS: 1
};
export const NETWORK: INetwork = {
  RANDOM_WEIGHTS_LOWER_BOUNDS: -1,
  RANDOM_WEIGHTS_UPPER_BOUNDS: 1,
  ACTIVATION_FUNCTION: "sigmoid"
};
